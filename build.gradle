plugins {
    id 'maven-publish'
    id "architectury-plugin" version "3.4-SNAPSHOT"
    alias(libs.plugins.quilt.loom)
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
    allprojects { repositories { maven { url 'https://jitpack.io' } } }
    maven {
        name = 'Quilt'
        url = 'https://maven.quiltmc.org/repository/release'
    }
    maven {
        name "Siphalor's Maven"
        url "https://maven.siphalor.de"
    }
    maven {url = "https://maven.kyrptonaught.dev"}
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    // The following line declares the mojmap mappings, you may use other mappings as well
//        mappings loom.officialMojangMappings()
    mappings(loom.layered {
        addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${rootProject.minecraft_version}+build.${rootProject.quilt_mappings_version}:v2"))
    })
    // The following line declares the yarn mappings you may select this one as well.
//         mappings "net.fabricmc:yarn:1.19+build.4:v2"
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}"
    // Remove the next few lines if you don't want to depend on the API
    modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}") {
        // We must not pull Fabric Loader from Architectury Fabric
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }
//	modImplementation ("") {
//		exclude group: 'net.fabricmc'
//		exclude group: 'net.fabricmc.fabric-api'
//	}
    modImplementation(libs.customportalapi) {
        exclude group: 'net.fabricmc'
        exclude group: 'net.fabricmc.fabric-api'
    }
    include(libs.customportalapi) {
        exclude group: 'net.fabricmc'
        exclude group: 'net.fabricmc.fabric-api'
    }
//	modImplementation(libs.libblockattributes) {
//		exclude group: 'net.fabricmc'
//		exclude group: 'net.fabricmc.fabric-api'
//	}
    modImplementation("com.github.Chocohead:Fabric-ASM:v${rootProject.fabric_asm_version}") {
        exclude group: 'net.fabricmc'
        exclude group: "net.fabricmc.fabric-api"
    }
    include("com.github.Chocohead:Fabric-ASM:v${rootProject.fabric_asm_version}") {
        exclude group: 'net.fabricmc'
        exclude group: "net.fabricmc.fabric-api"
    }

    // QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
    // Quilted Fabric API will automatically pull in the correct QSL version.
    modImplementation(libs.nbtcrafting) {
        exclude group: 'net.fabricmc'
        exclude group: 'net.fabricmc.fabric-api'
    }
    modImplementation 'com.github.Alexandra-Myers:Atlas-Combat:1.19.2-1.0.4'
}

loom {
    accessWidenerPath = file("src/main/resources/malechia.accesswidener")
}

processResources {
    inputs.property "version", version

    filesMatching('quilt.mod.json') {
        expand "version": version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    // Still required by IDEs such as Eclipse and Visual Studio Code
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    // If this mod is going to be a library, then it should also generate Javadocs in order to aid with developement.
    // Uncomment this line to generate them.
    // withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

// Configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
